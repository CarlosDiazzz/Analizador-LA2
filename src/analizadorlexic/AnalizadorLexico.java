/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package analizadorlexic;

import com.formdev.flatlaf.FlatLaf;
import com.formdev.flatlaf.themes.FlatMacLightLaf;
import java.awt.Color;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.UIManager;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;

/**
 *
 * @author carlo
 */
public class AnalizadorLexico extends javax.swing.JFrame {

    private List<Simbolo> tablaSimbolos = new ArrayList<>();
    List<Cuadruplo> cuadruplos = new ArrayList<>();
    int contadorCuadruplos = 0;

    /**
     * Creates new form AnalizadorLexico
     */
    public AnalizadorLexico() {
        try {
            InputStream is = getClass().getResourceAsStream("/fuentes/Manrope-Regular.ttf");
            if (is == null) {
                throw new IOException("No se encontr√≥ el archivo de fuente Manrope");
            }

            Font manrope = Font.createFont(Font.TRUETYPE_FONT, is).deriveFont(14f);
            GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
            ge.registerFont(manrope);

            UIManager.put("defaultFont", manrope);
            FlatLaf.registerCustomDefaultsSource("mytheme");
            FlatMacLightLaf.setup();
            UIManager.setLookAndFeel(new FlatMacLightLaf());
                       
        } catch (Exception e) {
            System.out.println("Error al aplicar el tema: " + e);
        }

        initComponents();
        setIconImage(new ImageIcon(getClass().getResource("/imagenes/logo.png")).getImage());

        lineasArea.setEditable(false);
        txtSalida.setEditable(false);

        txtEntrada.getDocument().addDocumentListener(new DocumentListener() {
            public void insertUpdate(DocumentEvent e) {
                actualizarLineas();
            }

            public void removeUpdate(DocumentEvent e) {
                actualizarLineas();
            }

            public void changedUpdate(DocumentEvent e) {
                actualizarLineas();
            }
        });
        this.setLocationRelativeTo(null);
    }

    private void actualizarLineas() {
        String texto = txtEntrada.getText();
        int lineas = texto.split("\n", -1).length;
        StringBuilder sb = new StringBuilder();
        for (int i = 1; i <= lineas; i++) {
            sb.append(i).append("\n");
        }
        lineasArea.setText(sb.toString());
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtEntrada = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtSalida = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnAnalizar = new javax.swing.JButton();
        limpiarButto = new javax.swing.JButton();
        cargarArchivoButtom = new javax.swing.JButton();
        guardarArchivoButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        lineasArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Compilador Robotico");
        setAutoRequestFocus(false);
        setBackground(new java.awt.Color(255, 255, 255));
        setExtendedState(6);
        setIconImages(null);

        txtEntrada.setColumns(20);
        txtEntrada.setRows(5);
        jScrollPane1.setViewportView(txtEntrada);

        txtSalida.setColumns(20);
        txtSalida.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        txtSalida.setRows(5);
        jScrollPane2.setViewportView(txtSalida);

        jLabel1.setFont(new java.awt.Font("Segoe UI Semibold", 1, 36)); // NOI18N
        jLabel1.setText("Compilador Robotico");

        btnAnalizar.setText("Analizar");
        btnAnalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarActionPerformed(evt);
            }
        });

        limpiarButto.setText("Limpiar");
        limpiarButto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarButtoActionPerformed(evt);
            }
        });

        cargarArchivoButtom.setText("Cargar Archivo");
        cargarArchivoButtom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarArchivoButtomActionPerformed(evt);
            }
        });

        guardarArchivoButton.setText("Guardar Archivo");
        guardarArchivoButton.setEnabled(false);
        guardarArchivoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarArchivoButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(209, 209, 209)
                .addComponent(cargarArchivoButtom)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(guardarArchivoButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAnalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(limpiarButto, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAnalizar)
                    .addComponent(limpiarButto)
                    .addComponent(cargarArchivoButtom)
                    .addComponent(guardarArchivoButton))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lineasArea.setColumns(20);
        lineasArea.setRows(5);
        lineasArea.setCaretColor(new java.awt.Color(140, 140, 140));
        jScrollPane3.setViewportView(lineasArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 448, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 552, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAnalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalizarActionPerformed
        analizar(txtEntrada.getText());
        guardarArchivoButton.setEnabled(false);
        guardarArchivoButton.setEnabled(false);
    }//GEN-LAST:event_btnAnalizarActionPerformed

    private void limpiarButtoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarButtoActionPerformed
        txtEntrada.setText("");
        txtSalida.setText("");
        lineasArea.setText("");
        txtEntrada.getHighlighter().removeAllHighlights();
        guardarArchivoButton.setEnabled(false);
        limpiarButto.setEnabled(false);
    }//GEN-LAST:event_limpiarButtoActionPerformed

    private void cargarArchivoButtomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarArchivoButtomActionPerformed
        guardarArchivoButton.setEnabled(true);
        JFileChooser chooser = new JFileChooser();

        // Filtro: solo archivos de texto (.txt, .java, .c, .cpp, .py, etc.)
        FileNameExtensionFilter filtro = new FileNameExtensionFilter(
                "Archivos de texto", "txt", "java", "c", "cpp", "py", "html", "xml", "json", "js", "css"
        );
        chooser.setFileFilter(filtro);

        int resultado = chooser.showOpenDialog(this);
        if (resultado == JFileChooser.APPROVE_OPTION) {
            File archivo = chooser.getSelectedFile();
            try (BufferedReader reader = new BufferedReader(new FileReader(archivo))) {
                StringBuilder sb = new StringBuilder();
                String linea;
                while ((linea = reader.readLine()) != null) {
                    sb.append(linea).append("\n");
                }
                txtEntrada.setText(sb.toString());
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al leer el archivo.");
            }
        }
    }//GEN-LAST:event_cargarArchivoButtomActionPerformed

    private void guardarArchivoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarArchivoButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        int resultado = chooser.showSaveDialog(this);
        if (resultado == JFileChooser.APPROVE_OPTION) {
            File archivo = chooser.getSelectedFile();
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(archivo))) {
                writer.write(txtEntrada.getText());
                JOptionPane.showMessageDialog(this, "Archivo guardado correctamente.");
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al guardar el archivo");
            }
        }
    }//GEN-LAST:event_guardarArchivoButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        try {
            UIManager.setLookAndFeel(new FlatMacLightLaf());
        } catch (Exception e) {
            e.printStackTrace();
        }
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AnalizadorLexico.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AnalizadorLexico.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AnalizadorLexico.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AnalizadorLexico.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AnalizadorLexico().setVisible(true);
            }
        });
    }

    private void analizar(String entrada) {
        List<Token> tokens = new ArrayList<>();
        tablaSimbolos.clear();
        cuadruplos.clear();
        contadorCuadruplos = 0;

        txtSalida.setText("");
        txtEntrada.getHighlighter().removeAllHighlights();

        StringBuilder salidaLexico = new StringBuilder("üîç An√°lisis L√©xico:\n");
        StringBuilder salidaSintactico = new StringBuilder("üß© An√°lisis Sint√°ctico:\n");
        StringBuilder salidaSemantico = new StringBuilder("üß† An√°lisis Sem√°ntico:\n");

        Pattern patronID = Pattern.compile("^[A-Z]+[0-9]*$", Pattern.CASE_INSENSITIVE);
        Pattern patronValor = Pattern.compile("^\\d+$");
        Set<String> comandos = Set.of("base", "codo", "hombro", "garra", "velocidad", "repetir");

        String[] palabras = entrada.split("\\s+");
        int i = 0;

        while (i < palabras.length) {
            String actual = palabras[i];
            try {
                if (!actual.matches("^[a-zA-Z0-9.={}]+$")) {
                    salidaLexico.append("‚ùå Error l√©xico: token inv√°lido ‚Üí \"").append(actual).append("\"\n");
                    lanzarErrorLinea("Token no reconocido", actual);
                    return;
                }
                salidaLexico.append("‚úî Token v√°lido: ").append(actual).append("\n");

                // Declaraci√≥n de robot
                if (actual.equalsIgnoreCase("Robot")) {
                    if (i + 1 < palabras.length && patronID.matcher(palabras[i + 1]).matches()) {
                        String robotID = palabras[i + 1];
                        salidaSintactico.append("‚úî Declaraci√≥n de robot: ").append(robotID).append("\n");

                        if (tablaSimbolos.stream().anyMatch(s -> s.getId().equalsIgnoreCase(robotID) && s.getMetodo().equals("robot"))) {
                            salidaSemantico.append("‚ùå Error sem√°ntico: Robot ya declarado ‚Üí \"").append(robotID).append("\"\n");
                            lanzarErrorLinea("Robot ya fue declarado anteriormente", robotID);
                            return;
                        }

                        tablaSimbolos.add(new Simbolo(robotID, "robot", 0, 0));
                        cuadruplos.add(new Cuadruplo("CREATE", "Robot", "‚Äî", robotID));
                        i += 2;
                        continue;
                    } else {
                        salidaSintactico.append("‚ùå Error sint√°ctico: Falta identificador tras 'Robot'\n");
                        lanzarErrorLinea("Falta identificador tras 'Robot'", actual);
                        return;
                    }
                }

                if (i + 2 < palabras.length) {
                    String full = palabras[i];
                    String[] partes = full.split("\\.");

                    if (partes.length != 2) {
                        salidaSintactico.append("‚ùå Error sint√°ctico: Se esperaba ID.comando ‚Üí \"").append(full).append("\"\n");
                        lanzarErrorLinea("Sintaxis inv√°lida, se esperaba ID.comando", full);
                        return;
                    }

                    String id = partes[0];
                    String comando = partes[1];

                    if (!tablaSimbolos.stream().anyMatch(s -> s.getId().equalsIgnoreCase(id) && s.getMetodo().equals("robot"))) {
                        salidaSemantico.append("‚ùå Error sem√°ntico: Robot no declarado ‚Üí \"").append(id).append("\"\n");
                        lanzarErrorLinea("Robot no ha sido declarado", id);
                        return;
                    }

                    if (!comandos.contains(comando.toLowerCase())) {
                        salidaSemantico.append("‚ùå Error sem√°ntico: Comando inv√°lido ‚Üí \"").append(comando).append("\"\n");
                        lanzarErrorLinea("Comando no reconocido", comando);
                        return;
                    }

                    String operador = palabras[i + 1];
                    String valor = palabras[i + 2];

                    if (!operador.equals("=")) {
                        salidaSintactico.append("‚ùå Error sint√°ctico: Se esperaba '=' despu√©s del comando\n");
                        lanzarErrorLinea("Falta '=' despu√©s del comando", operador);
                        return;
                    }

                    if (!patronValor.matcher(valor).matches()) {
                        salidaSemantico.append("‚ùå Error sem√°ntico: Valor num√©rico inv√°lido ‚Üí \"").append(valor).append("\"\n");
                        lanzarErrorLinea("Valor inv√°lido", valor);
                        return;
                    }

                    int val = Integer.parseInt(valor);

                    // Repetir (bloque)
                    if (comando.equalsIgnoreCase("repetir")) {
                        if (val < 1 || val > 100) {
                            salidaSemantico.append("‚ùå Error sem√°ntico: Valor de repetici√≥n fuera de rango ‚Üí ").append(val).append("\n");
                            lanzarErrorLinea("Repeticiones fuera de rango", valor);
                            return;
                        }

                        if (i + 3 >= palabras.length || !palabras[i + 3].equals("{")) {
                            salidaSintactico.append("‚ùå Error sint√°ctico: Falta '{' para abrir el bloque de repetici√≥n\n");
                            lanzarErrorLinea("Falta '{' para abrir el bloque", palabras[i + 3]);
                            return;
                        }

                        int j = i + 4;
                        List<String> bloque = new ArrayList<>();

                        while (j < palabras.length && !palabras[j].equals("}")) {
                            bloque.add(palabras[j]);
                            j++;
                        }

                        if (j >= palabras.length || !palabras[j].equals("}")) {
                            salidaSintactico.append("‚ùå Error sint√°ctico: Falta '}' para cerrar el bloque de repetici√≥n\n");
                            lanzarErrorLinea("Falta '}' para cerrar el bloque", valor);
                            return;
                        }

                        String loopVar = "contador" + (contadorCuadruplos++);
                        String loopID = "loop" + (contadorCuadruplos++);
                        cuadruplos.add(new Cuadruplo("CREATE", id, "‚Äî", loopVar));
                        cuadruplos.add(new Cuadruplo("=", valor, "‚Äî", loopVar));
                        cuadruplos.add(new Cuadruplo("CREATE", "Loop", "‚Äî", loopID));
                        cuadruplos.add(new Cuadruplo("ASSOC", loopVar, "‚Äî", loopID + ".contador"));
                        cuadruplos.add(new Cuadruplo("ASSOC", loopID, "‚Äî", id + ".repetir"));

                        salidaSintactico.append("‚úî Bloque de repetici√≥n detectado con ").append(val).append(" repeticiones\n");
                        salidaSemantico.append("‚úî Ejecutando bloque ").append(val).append(" veces\n");

                        String bloqueTexto = String.join(" ", bloque);
                        for (int r = 0; r < val; r++) {
                            analizarBloque(bloqueTexto, tokens); // SIN CU√ÅDRUPLOS
                        }

                        cuadruplos.add(new Cuadruplo("EXEC_LOOP", id + ".repetir", "‚Äî", "‚Äî"));
                        i = j + 1;
                        continue;
                    }

                    // Validar rango
                    boolean valido = switch (comando.toLowerCase()) {
                        case "base" ->
                            val >= 0 && val <= 360;
                        case "hombro", "codo" ->
                            val >= 0 && val <= 180;
                        case "garra" ->
                            val >= 0 && val <= 90;
                        case "velocidad" ->
                            val >= 1 && val <= 60;
                        default ->
                            false;
                    };

                    if (!valido) {
                        salidaSemantico.append("‚ùå Error sem√°ntico: Valor fuera de rango para ").append(comando).append(" ‚Üí ").append(val).append("\n");
                        lanzarErrorLinea("Valor fuera de rango para " + comando, valor);
                        return;
                    }

                    // Agregar a tabla de s√≠mbolos
                    tablaSimbolos.removeIf(s -> s.getId().equalsIgnoreCase(id) && s.getMetodo().equalsIgnoreCase(comando));
                    tablaSimbolos.add(new Simbolo(id, comando, 1, val));

                    salidaSintactico.append("‚úî Asignaci√≥n: ").append(full).append(" = ").append(valor).append("\n");
                    salidaSemantico.append("‚úî Valor v√°lido asignado a ").append(full).append("\n");

                    // Cu√°druplos para velocidad
                    if (comando.equalsIgnoreCase("velocidad")) {
                        String tempVel = "vel" + (contadorCuadruplos++);
                        cuadruplos.add(new Cuadruplo("CREATE", id, "‚Äî", tempVel));
                        cuadruplos.add(new Cuadruplo("=", valor, "‚Äî", tempVel));
                        cuadruplos.add(new Cuadruplo("ASSOC", tempVel, "‚Äî", id + ".velocidad"));
                    } else {
                        cuadruplos.add(new Cuadruplo("CALL", id, valor, comando));
                    }

                    i += 3;
                } else {
                    salidaSintactico.append("‚ùå Error sint√°ctico: Expresi√≥n incompleta\n");
                    lanzarErrorLinea("Expresi√≥n incompleta", actual);
                    return;
                }
            } catch (Exception e) {
                txtSalida.append("‚ùå Error inesperado: " + e.getMessage());
                return;
            }
        }

        // Mostrar resultados
        txtSalida.append(salidaLexico.toString());
        txtSalida.append("\n");
        txtSalida.append(salidaSintactico.toString());
        txtSalida.append("\n");
        txtSalida.append(salidaSemantico.toString());
        txtSalida.append("\n");

        txtSalida.append("üîß Tabla de s√≠mbolos:\n\n");
        txtSalida.append(String.format("%-10s %-12s %-12s %-10s\n", "ID", "M√âTODO", "PAR√ÅMETRO", "VALOR"));
        for (Simbolo s : tablaSimbolos) {
            txtSalida.append(String.format("%-10s %-12s %-12d %-10d\n",
                    s.getId(), s.getMetodo(), s.getParametro(), s.getValor()));
        }

        txtSalida.append("\nüìä Tabla de Cu√°druplos:\n\n");
        txtSalida.append(String.format("%-5s %-10s %-12s %-12s %-10s\n", "N¬∫", "Operador", "Operando 1", "Operando 2", "Resultado"));
        for (int j = 0; j < cuadruplos.size(); j++) {
            Cuadruplo c = cuadruplos.get(j);
            txtSalida.append(String.format("%-5d %-10s %-12s %-12s %-10s\n", j, c.getOperador(), c.getOperando1(), c.getOperando2(), c.getResultado()));
        }

        int opcion = JOptionPane.showConfirmDialog(
                this,
                "¬øDeseas generar el archivo .ASM y ejecutar en DOSBox?",
                "Generaci√≥n y Ejecuci√≥n",
                JOptionPane.YES_NO_OPTION
        );

        if (opcion == JOptionPane.YES_OPTION) {
            String rutaASM = generarASMDesdeCuadruplos(cuadruplos);
            try {
                compilarASMConDosbox(rutaASM);
                ejecutarEnDosboxConRuta(rutaASM.replace(".asm", ".exe"));
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "‚ùå Error al compilar o ejecutar en DOSBox: " + e.getMessage());
                e.printStackTrace();
            }
        } else {
            JOptionPane.showMessageDialog(this, "‚úî An√°lisis completo. No se gener√≥ archivo ASM ni se ejecut√≥.");
        }

    }

    private String generarASMDesdeCuadruplos(List<Cuadruplo> cuadruplos) {
        StringBuilder asm = new StringBuilder();
        Map<String, Integer> temporales = new HashMap<>();
        Map<String, Integer> posicionActual = new HashMap<>();

        asm.append(".MODEL SMALL\n")
                .append(".STACK 100H\n")
                .append(".DATA\n")
                .append("PORTA EQU 00H\n")
                .append("PORTB EQU 02H\n")
                .append("PORTC EQU 04H\n")
                .append("Config EQU 06H\n")
                .append(".CODE\n")
                .append("MOV AX, @DATA\n")
                .append("MOV DS, AX\n\n")
                .append("MOV DX, Config\n")
                .append("MOV AL, 10000000B\n")
                .append("OUT DX, AL\n\n");

        int pasoContador = 1;
        int velocidadActual = 1;

        for (Cuadruplo q : cuadruplos) {
            String op = q.getOperador().toUpperCase();

            if (op.equals("=") && q.getResultado().startsWith("vel")) {
                try {
                    int vel = Integer.parseInt(q.getOperando1());
                    temporales.put(q.getResultado(), vel);
                } catch (NumberFormatException ignored) {
                }
            }

            if (op.equals("ASSOC") && q.getResultado().endsWith(".velocidad")) {
                String variable = q.getOperando1();
                if (temporales.containsKey(variable)) {
                    velocidadActual = temporales.get(variable);
                } else {
                    velocidadActual = 10;
                }
            }

            if (op.equals("CALL")) {
                String id = q.getOperando1();
                int valor = Integer.parseInt(q.getOperando2());
                String componente = q.getResultado();

                String clave = id + "." + componente;
                int actual = posicionActual.getOrDefault(clave, 0);

                int diferencia = valor - actual;
                boolean sentidoHorario = diferencia >= 0;
                int gradosAbsolutos = Math.abs(diferencia);

                int secuencias = calcularSecuencias(componente, gradosAbsolutos);

                String puerto = switch (componente.toLowerCase()) {
                    case "base" ->
                        "PORTA";
                    case "hombro" ->
                        "PORTB";
                    case "codo" ->
                        "PORTC";
                    case "garra" ->
                        "PORTA";
                    default ->
                        "PORTA";
                };

                // Invertimos la velocidad antes del c√°lculo
                int velocidadInvertida = 61 - velocidadActual;  // 1 ‚Üí 60, 2 ‚Üí 59, ..., 60 ‚Üí 1

// Delay basado en la velocidad invertida
                int delay = Math.max(1, velocidadInvertida) * 200;

                asm.append("  ; ").append(componente.toUpperCase()).append(" de ").append(id).append("\n");
                asm.append("  ; Ir de ").append(actual).append("¬∞ a ").append(valor).append("¬∞, sentido: ")
                        .append(sentidoHorario ? "Horario" : "Antihorario").append("\n");
                asm.append("  MOV DX, ").append(puerto).append("\n");

                for (int s = 0; s < secuencias; s++) {
                    for (int i = 1; i <= 4; i++) {
                        int paso = sentidoHorario ? i : (5 - i);  // Invertir pasos si antihorario
                        asm.append("  MOV AL, ").append(getSecuenciaPaso(paso)).append("\n");
                        asm.append("  OUT DX, AL\n");
                        asm.append("delay").append(pasoContador).append(":\n");
                        asm.append("  MOV CX, ").append(delay).append("\n");
                        asm.append("espera").append(pasoContador).append(":\n");
                        asm.append("  DEC CX\n");
                        asm.append("  JNZ espera").append(pasoContador).append("\n");
                        pasoContador++;
                    }
                }

                asm.append("\n");

                // Actualiza la posici√≥n
                posicionActual.put(clave, valor);
            }
        }

        asm.append("MOV AH, 4CH\nINT 21H\nEND\n");

        String rutaASM = "C:\\Users\\carlo\\Downloads\\DOSBox2\\Tasm\\robot.asm";

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(rutaASM))) {
            writer.write(asm.toString());
            System.out.println("‚úÖ Archivo ASM generado en: " + rutaASM);
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al guardar archivo .ASM: " + e.getMessage());
        }

        return rutaASM;
    }

    private int calcularSecuencias(String componente, int valor) {
        double gradosPorPasoElectrico = 0.88; // Paso individual (de 1 a 4)
        double gradosPorSecuencia = gradosPorPasoElectrico * 4; // Cada ciclo completo = 4 pasos

        return Math.max(1, (int) Math.round(valor / gradosPorSecuencia));
    }

    private String getSecuenciaPaso(int paso) {
        return switch (paso) {
            case 1 ->
                "00000110B";
            case 2 ->
                "00001100B";
            case 3 ->
                "00001001B";
            case 4 ->
                "00000011B";
            default ->
                "00000000B";
        };
    }

    private void compilarASMConDosbox(String rutaASM) throws IOException, InterruptedException {
        String dosboxPath = "C:\\Users\\carlo\\Downloads\\DOSBox2\\dosbox.exe";
        String rutaASMDir = "C:\\Users\\carlo\\Downloads\\DOSBox2\\Tasm";

        String nombreASM = new File(rutaASM).getName();
        String nombreSinExtension = nombreASM.replace(".asm", "");

        // Comando DOSBox para ensamblar y linkear
        ProcessBuilder pb = new ProcessBuilder(
                dosboxPath,
                "-c", "mount c \"" + rutaASMDir + "\"",
                "-c", "c:",
                "-c", "tasm " + nombreASM,
                "-c", "tlink " + nombreSinExtension,
                "-c", "exit"
        );

        pb.inheritIO(); // Para mostrar la salida de DOSBox en consola
        Process proceso = pb.start();
        proceso.waitFor();

        System.out.println("‚úÖ Compilaci√≥n con DOSBox terminada.");
    }

    private void ejecutarEnDosboxConRuta(String rutaEXE) throws IOException, InterruptedException {
        String dosboxPath = "C:\\Users\\carlo\\Downloads\\DOSBox2\\dosbox.exe";
        String directorio = "C:\\Users\\carlo\\Downloads\\DOSBox2\\Tasm";
        String nombreExe = new File(rutaEXE).getName();

        // Este comando ejecuta DOSBox con los pasos de compilaci√≥n adentro
        ProcessBuilder pb = new ProcessBuilder(
                "C:\\Users\\carlo\\Downloads\\DOSBox2\\dosbox.exe",
                "-c", "mount c C:\\Users\\carlo\\Downloads\\DOSBox2\\Tasm",
                "-c", "c:",
                "-c", "tasm robot.asm",
                "-c", "tlink robot.obj",
                "-c", "robot",
                "-c", "exit"
        );

        pb.inheritIO(); // Ver en consola
        Process proceso = pb.start();
        proceso.waitFor();

        System.out.println("‚úÖ Ejecuci√≥n del archivo .EXE en DOSBox terminada.");
    }

    private void pintarLineaRoja(JTextArea area, int numeroLinea) {
        try {
            int start = area.getLineStartOffset(numeroLinea);
            int end = area.getLineEndOffset(numeroLinea);
            Highlighter highlighter = area.getHighlighter();
            Highlighter.HighlightPainter painter = new DefaultHighlighter.DefaultHighlightPainter(Color.PINK);
            highlighter.addHighlight(start, end, painter);
        } catch (BadLocationException e) {
            e.printStackTrace();
        }
    }

    private void lanzarErrorLinea(String mensaje, String contenido) {
        txtSalida.append("‚ùå Error: " + mensaje + " ‚Üí \"" + contenido + "\"\n");

        try {
            String texto = txtEntrada.getText();
            int index = texto.indexOf(contenido);
            if (index >= 0) {
                int linea = txtEntrada.getLineOfOffset(index);
                pintarLineaRoja(txtEntrada, linea);

                // A√±ade el n√∫mero de l√≠nea al mensaje:
                txtSalida.append("üî¥ L√≠nea: " + (linea + 1) + "\n");
            }
        } catch (BadLocationException e) {
            e.printStackTrace();
        }
    }

    private void analizarBloque(String entrada, List<Token> tokens) {
        String[] palabras = entrada.split("\\s+");
        Pattern patronID = Pattern.compile("^[A-Z]+[0-9]*$", Pattern.CASE_INSENSITIVE);
        Pattern patronValor = Pattern.compile("^\\d+$");
        Set<String> comandos = Set.of("base", "codo", "hombro", "garra", "velocidad");

        int i = 0;
        while (i < palabras.length) {
            if (i + 2 >= palabras.length) {
                break;
            }

            String full = palabras[i];
            String[] partes = full.split("\\.");
            if (partes.length != 2) {
                break;
            }

            String id = partes[0];
            String comando = partes[1];
            String operador = palabras[i + 1];
            String valor = palabras[i + 2];

            // Validaciones b√°sicas
            if (!operador.equals("=") || !patronValor.matcher(valor).matches()) {
                lanzarErrorLinea("Expresi√≥n inv√°lida en bloque", full);
                break;
            }

            int valorNumerico = Integer.parseInt(valor);

            if (!tablaSimbolos.stream().anyMatch(s -> s.getId().equalsIgnoreCase(id) && s.getMetodo().equals("robot"))) {
                lanzarErrorLinea("Robot no ha sido declarado: " + id, full);
                tokens.add(new Token("ERROR", full));
                i += 3;
                continue;
            }

            if (!comandos.contains(comando.toLowerCase())) {
                lanzarErrorLinea("Comando inv√°lido en bloque: " + comando, comando);
                tokens.add(new Token("ERROR", comando));
                i += 3;
                continue;
            }

            // Validaciones por comando
            boolean valido = switch (comando.toLowerCase()) {
                case "base" ->
                    valorNumerico >= 0 && valorNumerico <= 360;
                case "hombro", "codo" ->
                    valorNumerico >= 0 && valorNumerico <= 180;
                case "garra" ->
                    valorNumerico >= 0 && valorNumerico <= 90;
                case "velocidad" ->
                    valorNumerico >= 1 && valorNumerico <= 60;
                default ->
                    false;
            };

            if (!valido) {
                lanzarErrorLinea("Valor fuera de rango para " + comando + ": " + valor, valor);
                tokens.add(new Token("ERROR", valor));
                i += 3;
                continue;
            }

            // Guardar en tabla de s√≠mbolos
            tablaSimbolos.removeIf(s -> s.getId().equalsIgnoreCase(id) && s.getMetodo().equalsIgnoreCase(comando));
            tablaSimbolos.add(new Simbolo(id, comando, 1, valorNumerico));

            // Generar cu√°druplos
            if (comando.equalsIgnoreCase("velocidad")) {
                String tempVel = "vel" + (contadorCuadruplos++);
                cuadruplos.add(new Cuadruplo("CREATE", id, "‚Äî", tempVel));
                cuadruplos.add(new Cuadruplo("=", valor, "‚Äî", tempVel));
                cuadruplos.add(new Cuadruplo("ASSOC", tempVel, "‚Äî", id + ".velocidad"));
            } else {
                cuadruplos.add(new Cuadruplo("CALL", id, valor, comando));
            }

            // Agregar tokens para seguimiento (opcional)
            tokens.add(new Token("IDENTIFICADOR", id));
            tokens.add(new Token("OPERADOR", "."));
            tokens.add(new Token("COMANDO", comando));
            tokens.add(new Token("OPERADOR", "="));
            tokens.add(new Token("NUMERO", valor));

            i += 3;
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnalizar;
    private javax.swing.JButton cargarArchivoButtom;
    private javax.swing.JButton guardarArchivoButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton limpiarButto;
    private javax.swing.JTextArea lineasArea;
    private javax.swing.JTextArea txtEntrada;
    private javax.swing.JTextArea txtSalida;
    // End of variables declaration//GEN-END:variables
}
